###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml-py
#
###############################################################################

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# ruff: noqa: E501,F401,F821
# flake8: noqa: E501,F401,F821
# pylint: disable=unused-import,line-too-long
# fmt: off
import baml_py
from enum import Enum
from pydantic import BaseModel, ConfigDict
from typing_extensions import TypeAlias
from typing import Dict, Generic, List, Literal, Optional, TypeVar, Union


T = TypeVar('T')
CheckName = TypeVar('CheckName', bound=str)

class Check(BaseModel):
    name: str
    expression: str
    status: str

class Checked(BaseModel, Generic[T,CheckName]):
    value: T
    checks: Dict[CheckName, Check]

def get_checks(checks: Dict[CheckName, Check]) -> List[Check]:
    return list(checks.values())

def all_succeeded(checks: Dict[CheckName, Check]) -> bool:
    return all(check.status == "succeeded" for check in get_checks(checks))



class DebateMessage(BaseModel):
    role: Union[Literal["panelist_a"], Literal["panelist_b"], Literal["panelist_c"], Literal["moderator"]]
    content: str
    speaker_name: str

class DebateTopic(BaseModel):
    title: str
    description: str

class Hikes(BaseModel):
    name: str
    location: str
    difficulty: str
    distance: float
    attractions: List[str]

class MyUserMessage(BaseModel):
    role: Union[Literal["user"], Literal["assistant"]]
    content: str

class Resume(BaseModel):
    name: str
    email: str
    experience: List[str]
    skills: List[str]
